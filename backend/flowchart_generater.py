import os
import re
import json
import google.generativeai as genai
from dotenv import load_dotenv

load_dotenv()

GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
genai.configure(api_key=GEMINI_API_KEY)


# Generate a Draw.io System prompt
systemPrompt_ChatGeneration="""Generate the MX file code that can be directly imported into Draw.io to create a process map. The MX should define a workflow process map according the <List_of_Steps/> in the user's message, including shapes (e.g., rectangles for actions, diamonds for decisions), connectors, and labels. Make sure that the MX file generated by you is correct and can be copied to the Draw.IO application without errors.

Follow the rules below: 
<RULES>
Start and End nodes: Represent the beginning and end of the process.
Reflect on the chart all the steps listed in the 'List_of_Steps' section.
Do not mearge steps from the list of steps to the one block (mxCell) in the MX file. 
Do not group steps under each other.
The order of steps on the chart should be from left to right.
Keep maximum 5 steps in each row.
Limit the diagram width to fit within a typical .docx page (approximately 800–1000 pixels). Order blocks horizontally, and if the total width exceeds this limit, wrap the blocks to a new row.
Ensure a minimum vertical gap of 250 pixels between every two rows to make connectors clearly visible. Each new row must start at least 250 pixels below the previous row’s baseline.
Action nodes: Use rectangles to represent tasks or actions in the process.
Decision nodes: Use diamonds to represent decision points with 'Yes' and 'No' branches.
Group of steps are logically connected thus all steps needs to be in one line and not grouped.
<IMPORTANT> The text inside value tag must not contain double quotes "" use singel quotes instead. '' ex: value=" Product name is: 'Name of the Product'" or value="Click 'Submit' button"! <IMPORTANT/>
Each action listed on the 'List of Steps' needs to be a separate step (block)
Connectors: Connect shapes to define the flow from one step to the next.
Labels: Add labels to each shape to describe its role (e.g., 'Start', 'Decision: Is data valid?', 'End').
Do not use double quates in the value for the MX elements.
Do not use double quates inside the value tag. Use Single quates instead.
The flow of the chart should be fromleft to right.
The diagram should not have any bended lines.
Generate the MX file till all the steps are reflected and the file has closuing clause of "</diagram></mxfile>"
Start ad End nodes should be a circle (not elipses). 
The list of steps should be as detailed as possible.
Make sure taht steps are propery connected.
Make sure that all the items are properly alligend.
Remember to add any rules or decision points using dimonds.
Remember to split each point into the separate box.
</RULES>

<IMPORTAINT>
Be detailed and do not miss any steps in the <List_of_Steps/>.  The content will be copied and pasted to the blank Draw.IO project. Make sure that the XLM is correcly structed and will work. Please find the exmaple of the correct Draw IO format below. Do not define 'etag'.
Ensure a minimum vertical gap of 250 pixels between every two rows to make connectors clearly visible. Each new row must start at least 250 pixels below the previous row’s baseline.
</IMPORTAINT>
<CRITICAL>
1. For row-to-row connections: 
   - Use orthogonal edges with U-shaped routing (down → horizontal → up).
   - Add explicit waypoints in the connector’s `<Array as="points">` to avoid diagonal lines.
   Example:
   <Array as="points">
     <mxPoint x="[last_step_x]" y="[last_step_y+offset]"/>
     <mxPoint x="[next_row_start_x]" y="[last_step_y+offset]"/>
   </Array>
2. Connectors between rows MUST:  
  a. **Start** at the **bottom-center** of the last step in the current row.  
  b. **Move down 50px** vertically.  
  c. **Move horizontally (left/right)** to align with the next row’s first step.  
  d. **Move down another 50px** to connect to the **top-center** of the next row’s first step.  
  e. Example MX syntax for waypoints:  
    <Array as="points">  
      <!-- Bottom of last step + 50px down -->  
      <mxPoint x="500" y="300"/>  
      <!-- Align horizontally with next row -->  
      <mxPoint x="200" y="300"/>  
      <!-- Top of next row’s first step - 50px down -->  
      <mxPoint x="200" y="350"/>  
    </Array>  

3. Define edges (connectors) BEFORE their target steps in the MX file to ensure they render behind blocks.
   (Override default Draw.io behavior by reversing the order of edge/vertex definitions where possible).

4. Never allow connectors to overlap step blocks. Use vertical/horizontal buffer spacing.
</CRITICAL>

<MX FILE EXAMPLE>

<mxfile host="app.diagrams.net" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/133.0.0.0 Safari/537.36" version="26.0.14"><diagram name="Page-1" id="Bc5BMmCjmUbpGzu_Wot1">7Vpdc6MgFP01edwdv01fm6TtTLvTnUlnt32kkaq7RjKENGZ//ZKKUcHG1Cowkz7FewWEwzkXuGFkT5bZNQar6AcKYDKyjCAb2dORZZmm4dKfvWeXezzLzx0hjgNWqHTM43+QOQ3m3cQBXNcKEoQSEq/qzgVKU7ggNR/AGG3rxV5QUv/qCoRQcMwXIBG9v+OARLl37Bql/wbGYUQOA2ZvlqAozBzrCARoW3HZs5E9wQiR/GmZTWCyB6/AJa939c7bQ8cwTMkpFcJ0un7yI++ve3Mf/YqT5d3t7TfWyitINmzAcwIwYT0muwIG2hRFnBqX2ygmcL4Ci/2bLZ106ovIMqGWSR/BepVPw0ucQfrlS7GbxTchJjCruFi3ryFaQoJ3tEjJorwK45BpM3tbmRHmiiqTUfgA40B4aLmEiT4wpD6AWjGlFdhExALKI2YiTCIUohQks9J7idEmDfYYTQ1qlWXuEFoxNP9AQnZMFGBDUB3rd6Fdow1ewGMDYEoCOITkSDknL7cfy9GJwjABJH6ta6Z/2NtRLzE127naAzUtn6OmI1LTtBq46Q3FTVsFE2EWk8fK89O+qe8us6YZa/nN2BVGSof7WDUqtfZmWe3NKup1Z32xfrSx3uqb9azqTxTTLpfc8Tju+Bwn8o6yWhwtDt3ozhRHPzk52snJPVs5yV8cmmViX7TIJNe9IBOhIUex3jz99OZppzf/S28t/Blab25fevMU622sn97G2unt4ktvLfwZWm9+X3obK9abecKpWLbgOL0dUgLK9GaKGRflIGmIkpJ8ioITqXFiLCpoM3QwMrlgZJsdgxF/uBUaGjoY2frpjD/daqAz52v5b2OQ7PNtZ8nx51vpknP1kxy/4VYvuQIUnVDiQHJM5SBpGL01RElN9Ja+Syomvz1xLylk87skx+lplyQ0NHDItjQM2XxOUgOdjZXoTIddkuzkR2cl8Qu9bCXZ4oo1SwORNyrvUQgYGaKyhrpH8WyZV5MHe/6U3nvrh9mFf/9MGm6f9BF9BEAaYDs5+kjdMDaCpCYVIj34cJGmvtofY88Jc9vzPyKdT2j8PyIDntAaETuTuyEClYanCL+OdaYIH6NlU2SYSyGfCsl82kzqhrARpDO5FPLxkOzI0hufNOu8b+STZgPuGxsR886USvJX7c4UEQ6kvVGEmuX977x4eYvenv0H</diagram></mxfile>"""

def generate_flowchart(process_name, list_of_steps):
    """
    Generates a Draw.io flowchart PNG from given process steps using Gemini AI.
    
    Parameters:
        process_name (str): Name of the process (used for file naming).
        list_of_steps (list): List of steps in the process.

    Returns:
        str: File name of the generated PNG.
    """

    print("\n")
    print("process_name: ", process_name)
    print("\n")
    print("List_of_steps: ", list_of_steps)
    
    # Configure AI Model
    generation_config = {
        "temperature": 1,
        "top_p": 0.8,
        "top_k": 40,
        "max_output_tokens": 8192,
        "response_mime_type": "text/plain",
    }

    # Convert list of steps to JSON string
    steps_json = json.dumps(list_of_steps, indent=4)

    # Create AI Model
    model = genai.GenerativeModel(
        model_name="gemini-1.5-flash-002",
        generation_config=generation_config,
        system_instruction=systemPrompt_ChatGeneration
    )

    # Start AI Chat Session
    chat_session = model.start_chat()
    response = chat_session.send_message(steps_json)
    ChartGeneratedByAI = response.text

    # Extract XML Data
    pattern = r"```xml(.*?)```"
    match = re.search(pattern, ChartGeneratedByAI, re.DOTALL)

    if match:
        xml_content = match.group(1).strip()
    else:
        print("No XML content found.")
        return None

    # Save XML as .drawio file
    file_name = process_name.replace(' ', '_') + ".drawio"
    with open(file_name, "w", encoding="utf-8") as file:
        file.write(xml_content)

    print(f"Flowchart saved as {file_name}")

    # Convert .drawio to .png using Draw.io CLI 
    png_file = file_name.replace(".drawio", ".png")
    print("File Name: ", file_name)
    print("Png Name: ", png_file)
    convert_command = f"draw.io -x -f png -o {png_file} {file_name}"

    if os.system(convert_command) == 0:
        print(f"Flowchart converted to {png_file}")
        return png_file
    else:
        print("Conversion failed - may be draw.io cli won't work as expected")
        return None



# process_name = "Creating a Gmail and IRCTC Account"
# list_of_steps = [
#     {
#         "group_name": "Creating a Gmail Account",
#         "numbering": "1.0",
#         "time_stamp": "0:07",
#         "sub_steps": [
#             {
#                 "step": "Open any web browser and search for \"gmail\".",
#                 "numbering": "1.1",
#                 "time_stamp": "0:07"
#             },
#             {
#                 "step": "Click on the first link in the search results to navigate to the Gmail homepage.",
#                 "numbering": "1.2",
#                 "time_stamp": "0:10"
#             },
#             {
#                 "step": "Click the blue \"Create an account\" button. Select \"For my personal use.\"",
#                 "numbering": "1.3",
#                 "time_stamp": "0:13"
#             },
#             {
#                 "step": "Enter your First Name and Last Name in the respective fields.",
#                 "numbering": "1.4",
#                 "time_stamp": "0:20"
#             },
#             {
#                 "step": "Enter your birthday (Month, Day, Year) and select your Gender from the dropdown menus.",
#                 "numbering": "1.5",
#                 "time_stamp": "0:28"
#             },
#             {
#                 "step": "Select a Gmail address from the suggestions provided or create your own.  (SME chose a suggested address)", 
#                 "numbering": "1.6",
#                 "time_stamp": "0:37"
#             },
#             {
#                 "step": "Create and confirm a strong password that meets the specified criteria (minimum length, mix of characters).",
#                 "numbering": "1.7",
#                 "time_stamp": "1:01"
#             },
#             {
#                 "step": "Enter your phone number. An OTP will be sent to this number.",
#                 "numbering": "1.8",
#                 "time_stamp": "1:23"
#             },
#             {
#                 "step": "Enter the received OTP.",
#                 "numbering": "1.9",
#                 "time_stamp": "1:35"
#             },
#             {
#                 "step": "Add a recovery email (optional, SME skipped this step).",
#                 "numbering": "1.10",
#                 "time_stamp": "1:54"
#             },
#             {
#                 "step": "Review the account information and click \"Next\".",
#                 "numbering": "1.11",
#                 "time_stamp": "2:03"
#             },
#             {
#                 "step": "Agree to Google's Privacy and Terms.",
#                 "numbering": "1.12",
#                 "time_stamp": "2:20"
#             }
#         ]
#     },
#     {
#         "group_name": "Creating an IRCTC Account",
#         "numbering": "2.0",
#         "time_stamp": "2:35",
#         "sub_steps": [
#             {
#                 "step": "Open a web browser and search for \"irctc\".",
#                 "numbering": "2.1",
#                 "time_stamp": "2:35"
#             },
#             {
#                 "step": "Click the first link in the search results to navigate to the IRCTC homepage.",
#                 "numbering": "2.2",
#                 "time_stamp": "2:35"
#             },
#             {
#                 "step": "Click on the \"Register\" button.",
#                 "numbering": "2.3",
#                 "time_stamp": "2:48"
#             },
#             {
#                 "step": "Enter a Username. (Note:  The SME's initial attempt failed as the username was unavailable.)",
#                 "numbering": "2.4",
#                 "time_stamp": "2:54"
#             },
#             {
#                 "step": "Enter your Full Name.",
#                 "numbering": "2.5",
#                 "time_stamp": "3:14"
#             },
#             {
#                 "step": "Create and confirm a strong password following the guidelines shown on the page.",
#                 "numbering": "2.6",
#                 "time_stamp": "3:21"
#             },
#             {
#                 "step": "Enter your Gmail address.",
#                 "numbering": "2.7",
#                 "time_stamp": "3:40"
#             },
#             {
#                 "step": "Select your country from the dropdown menu.",
#                 "numbering": "2.8",
#                 "time_stamp": "3:50"
#             },
#             {
#                 "step": "Enter your mobile number. (Note: The SME's attempt failed because the number was already linked to another account.)",
#                 "numbering": "2.9",
#                 "time_stamp": "4:00"
#             },
#             {
#                 "step": "Enter the CAPTCHA code.",
#                 "numbering": "2.10",
#                 "time_stamp": "4:07"
#             },
#             {
#                 "step": "Click the \"Submit\" button.",
#                 "numbering": "2.11",
#                 "time_stamp": "4:17"
#             }
#         ]
#     }
# ]

# generate_flowchart(process_name, list_of_steps)